import Head from "next/head";
import { ethers } from "ethers";
import { useState } from "react";
import Greeter from "../artifacts/contracts/Greeter.sol/Greeter.json";
import Token from "../artifacts/contracts/Token.sol/Token.json";

const greeterAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
const tokenAddress = "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853";

export default function Home() {
  const [greeting, setGreetingValue] = useState("");
  const [userAccount, setUserAccount] = useState("");
  const [amount, setAmount] = useState(0);

  async function requestAccount() {
    await window.ethereum.request({ method: "eth_requestAccounts" });
  }

  async function fetchGreeting() {
    if (typeof window.ethereum !== "undefined") {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const contract = new ethers.Contract(
        greeterAddress,
        Greeter.abi,
        provider
      );
      try {
        const data = await contract.greet();
        console.log("Data: ", data);
      } catch (err) {
        console.log("Error: ", err);
      }
    }
  }

  async function setGreeting() {
    if (!greeting) return;
    if (typeof window.ethereum !== "undefined") {
      await requestAccount();
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(greeterAddress, Greeter.abi, signer);
      const transaction = await contract.setGreeting(greeting);
      setGreetingValue("");
      await transaction.wait();
      fetchGreeting();
    }
  }

  async function getBalance() {
    if (typeof window.ethereum !== "undefined") {
      const [account] = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
      const providers = new ethers.providers.Web3Provider(window.ethereum);
      const contract = new ethers.Contract(tokenAddress, Token.abi, providers);
      const balance = await contract.balanceOf(account);
      console.log("Balance: ", balance.toString());
    }
  }

  async function sendCoin() {
    if (window.ethereum !== "undefined") {
      await requestAccount();
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(tokenAddress, Token.abi, signer);
      const transaction = await contract.transfer(userAccount, amount);
      await transaction.wait();
      console.log(`${amount} coins were sent to ${userAccount}`);
    }
  }

  return (
    <div>
      <Head>
        <title>NFT MarketPlace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className=" font-bold">
        <button
          className="m-4 rounded-md bg-blue-900 p-2 px-4 font-extrabold text-white hover:scale-110 hover:rounded-xl hover:bg-gray-400 hover:text-blue-900"
          onClick={fetchGreeting}
        >
          Fetch Greeting
        </button>
        <button
          className="m-4 rounded-md bg-blue-900 p-2 px-4 font-extrabold text-white hover:scale-110 hover:rounded-xl hover:bg-gray-400 hover:text-blue-900"
          onClick={setGreeting}
        >
          Set Greeting
        </button>
        <div>
          <input
            className=" m-4 rounded-md bg-gray-300 py-1 px-3 placeholder-gray-700 hover:ml-6 hover:scale-110 hover:rounded-xl hover:bg-gray-400"
            onChange={(e) => setGreetingValue(e.target.value)}
            placeholder="Set Greeting..."
          />
        </div>
        <section className="relative flex items-center py-5 px-2">
          <hr className="flex-grow border-t border-gray-400" />
          <span className="mx-4 flex-shrink text-gray-400">Changed it</span>
          <hr className="flex-grow border-t border-gray-400" />
        </section>
        <button
          className="m-4 rounded-md bg-blue-900 p-2 px-4 font-extrabold text-white hover:scale-110 hover:rounded-xl hover:bg-gray-400 hover:text-blue-900"
          onClick={getBalance}
        >
          Get Balance
        </button>
        <button
          className="m-4 rounded-md bg-blue-900 p-2 px-4 font-extrabold text-white hover:scale-110 hover:rounded-xl hover:bg-gray-400 hover:text-blue-900"
          onClick={sendCoin}
        >
          Send Coins
        </button>
        <div>
          <input
            className=" m-4 rounded-md bg-gray-300 py-1 px-3 placeholder-gray-700 hover:ml-6 hover:scale-110 hover:rounded-xl hover:bg-gray-400"
            onChange={(e) => setUserAccount(e.target.value)}
            placeholder="Account ID..."
          />
        </div>
        <div>
          <input
            className=" m-4 rounded-md bg-gray-300 py-1 px-3 placeholder-gray-700 hover:ml-6 hover:scale-110 hover:rounded-xl hover:bg-gray-400"
            onChange={(e) => setAmount(e.target.value)}
            placeholder="Amount..."
          />
        </div>
      </main>
    </div>
  );
}
